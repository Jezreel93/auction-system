version: '2'

services:
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"
    networks:
      - my-network  
  
  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
      - "9093:9093"
    expose:
      - "9093"
      - "9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_BROKER_ID: "1"
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    #volumes:
    #  - /logs:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      - my-network

  mongodb:
    image: mongo:5
    container_name: my-mongo
    ports:
      - "27017:27017"
#    volumes:
#      - mongo_data:/data/db
    environment:
      MONGODB_DATABASE: bid-db
    networks:
      - my-network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - my-network

  bid-receiver:
    build:
      context: ./bid-receiver
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - mongodb
      - kafka
      - redis
    environment:
      KAFKA_URI: kafka:9092
      REDIS_HOST: redis
      REDIS_PORT: 6379
    networks:
      - my-network

  bid-processor:
    build:
      context: ./bid-processor
      dockerfile: Dockerfile
    depends_on:
      - mongodb
      - kafka
    environment:
      MONGODB_URI: mongodb://mongodb:27017/bid-db
      KAFKA_URI: kafka:9092
    networks:
      - my-network


#volumes:
#  mongo_data:

networks:
  my-network:
    driver: bridge